1. Tiendas: id_tienda, nombre, id_direccion, id_jefe.
2. Tiendas_despacho: id_tienda, comuna_despacho.
3. Personal: id_personal, nombre, rut, edad, sexo, id_tienda.
4. Usuarios: id_usuario, nombre, rut, edad, sexo, id_direccion.
5. Direcciones: id_direccion, nombre_direccion, comuna.
6. Compras: id_compra, id_usuarios, id_direccion, id_producto, cantidad, id_tienda.
7. Productos: id_producto, nombre, precio, descripcion, tipo{no_comestibles,frecos,congelados,conservas}
8. No Comestibles: id_producto, ancho, largo, alto, peso.
9. Congelados: id_producto, fecha_exp, peso.
10. Frescos: id_producto, fecha_exp, duracion_sin_refrigerar.
11. Conservas: id_producto, fecha_exp, metodo.
12. Stocks: id_producto, id_tienda.

¡Muy buen trabajo! A continuación les hago algunos comentarios. Ojo en su esquema, las primary keys de sus tablas deben estar indicadas con un underline. Faltó describir la tabla Tiendas_Productos. Su modelación se beneficiaría de una tabla Comunas. Sería bueno también que el atributo dirección de la tabla Tiendas hiciera referencia a una tupla de la tabla Direcciones: la dirección o direcciones de los usuarios ya son obtenibles por otra vía. Estuvo buena la intuición de usar herencia, sin embargo, la modelación podrían mejorar si se agrega una tabla padre de los productos no comestibles, y lo otro, ¿qué tan necesario es contar con un id específico para cada tipo de producto congelado? Lo mismo va para el id específico de los no comestibles, este ¿les ayudó en algo para la consulta 3? En la consulta SQL2 proyectaron demás los atributos de la tienda ubicada en San Joaquín, por lo que se aplica un pequeño descuento. Descuentos: Sube en ruta erronea según rúbrica, issues y anuncios (grupoXX/Entrega1) 